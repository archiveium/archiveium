name: Archiveium App

on:
  push:
    branches: ['main', 'beta']
  pull_request:
    branches: ['main', 'beta']
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  build:
    name: Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - run: npm run build

  test:
    name: Test
    needs: build
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - run: npm run test:unit
      - run: npm run test:coverage
      - name: Coverage Report
        if: always() # generate the report even if tests are failing
        uses: davelosert/vitest-coverage-report-action@v2

  release-prod:
    name: Release Prod
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          npm run release:prod

  release-beta:
    name: Release Beta
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: beta
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          npm run release:beta

  docker-beta:
    name: Build & Push Beta Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/beta'
    needs: release-beta
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: beta
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set Release Version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
      - name: Push to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: |-
            linux/amd64
            linux/arm64
          file: Dockerfile
          push: true
          tags: archiveium/archiveium:${{ env.RELEASE_VERSION }}

  docker-prod:
    name: Build & Push Prod Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: release-prod
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set Release Version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
      - name: Push to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: |-
            linux/amd64
            linux/arm64
          file: Dockerfile
          push: true
          tags: archiveium/archiveium:${{ env.RELEASE_VERSION }},archiveium/archiveium:latest

  update-docker-compose:
    name: Update Docker Compose
    needs: docker-prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Get Release Version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
      - name: Update File
        run: ./docker/generate.sh -a "${{ env.RELEASE_VERSION }}"
